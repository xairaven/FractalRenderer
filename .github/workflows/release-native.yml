name: Build, Test, Create release (Native)

on:
  push:
    tags:
      - "*"

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download necessary packages
        run: |
          sudo apt install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Run Tests
        run: cargo test --verbose

  build:
    name: "Build"
    runs-on: ${{ matrix.os }}
    needs: [ tests ]

    env:
      ARCHIVE_TITLE: 'FractalRenderer'
      PROJECT_NAME: 'fractal-renderer'

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download necessary packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build
        run: cargo build --release

      - name: Archive files on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf ${{env.ARCHIVE_TITLE}}-v${{ github.ref_name }}-ubuntu.tar.gz assets .env -C target/release/ ${{env.PROJECT_NAME}}

      - name: Archive files on macOS
        if: matrix.os == 'macos-latest'
        run: |
          tar -czvf ${{env.ARCHIVE_TITLE}}-v${{ github.ref_name }}-macos.tar.gz assets .env -C target/release/ ${{env.PROJECT_NAME}}

      - name: Archive files on Windows
        if: matrix.os == 'windows-latest'
        run: |
          tar acvf ${{env.ARCHIVE_TITLE}}-v${{ github.ref_name }}-windows.zip assets .env -C target/release/ ${{env.PROJECT_NAME}}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Release-${{ matrix.os }}-v${{ github.ref_name }}
          path: |
            ${{env.ARCHIVE_TITLE}}-v${{ github.ref_name }}*
          retention-days: 1

  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Download artifacts to release
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ github.ref_name }}
          title: ${{ github.ref_name }}
          prerelease: false
          files: |
            Release-windows-latest-v${{ github.ref_name }}
            Release-ubuntu-latest-v${{ github.ref_name }}
            Release-macos-latest-v${{ github.ref_name }}